参考资料：
    https://blog.csdn.net/a793408199/article/details/84735213?spm=1001.2101.3001.6650.1&utm_medium=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link&depth_1-utm_source=distribute.pc_relevant.none-task-blog-2%7Edefault%7ECTRLIST%7Edefault-1.no_search_link
    https://www.cnblogs.com/cheyunhua/p/15351075.html


1、TCP状态转移要点
    TCP协议规定，对于已经建立的连接，网络双方要进行四次握手才能成功断开连接，如果缺少了其中某个步骤，将会使连接处于假死状态，连接本身占用的资源不会被释放。网络服务器
程序要同时管理大量连接，所以很有必要保证无用连接完全断开，否则大量僵死的连接会浪费许多服务器资源。在众多TCP状态中，最值得注意的状态有两个：CLOSE_WAIT和TIME_WAIT。

2、TCP状态
    LISTENING状态：FTP服务启动后首先处于侦听（LISTENING）状态。
    ESTABLISHED状态：ESTABLISHED的意思是建立连接。表示两台机器正在通信。
    CLOSE_WAIT：对方主动关闭连接或者网络异常导致连接中断，这时我方的状态会变成CLOSE_WAIT 此时我方要调用close()来使得连接正确关闭
    TIME_WAIT：我方主动调用close()断开连接，收到对方确认后状态变为TIME_WAIT。TCP协议规定TIME_WAIT状态会一直持续2MSL(即两倍的分段最大生存期)，以此来确保旧的
连接状态不会对新连接产生影响。处于TIME_WAIT状态的连接占用的资源不会被内核释放，所以作为服务器，在可能的情况下，尽量不要主动断开连接，以减少TIME_WAIT状态造成的资源
浪费。目前有一种避免TIME_WAIT资源浪费的方法，就是关闭socket的LINGER选项。但这种做法是TCP协议不推荐使用的，在某些情况下这个操作可能会带来错误。

3、socket的状态
    CLOSED	没有使用这个套接字[netstat 无法显示closed状态]
    LISTEN	套接字正在监听连接[调用listen后]
    SYN_SENT	套接字正在试图主动建立连接[发送SYN后还没有收到ACK]
    SYN_RECEIVED	正在处于连接的初始同步状态[收到对方的SYN，但还没收到自己发过去的SYN的ACK]
    ESTABLISHED	连接已建立
    CLOSE_WAIT	远程套接字已经关闭：正在等待关闭这个套接字[被动关闭的一方收到FIN]
    FIN_WAIT_1	套接字已关闭，正在关闭连接[发送FIN，没有收到ACK也没有收到FIN]
    CLOSING	套接字已关闭，远程套接字正在关闭，暂时挂起关闭确认[在FIN_WAIT_1状态下收到被动方的FIN]
    LAST_ACK	远程套接字已关闭，正在等待本地套接字的关闭确认[被动方在CLOSE_WAIT状态下发送FIN]
    FIN_WAIT_2	套接字已关闭，正在等待远程套接字关闭[在FIN_WAIT_1状态下收到发过去FIN对应的ACK]
    TIME_WAIT	这个套接字已经关闭，正在等待远程套接字的关闭传送[FIN、ACK、FIN、ACK都完毕，这是主动方的最后一个状态，在过了2MSL时间后变为CLOSED状态]

4、说明
4.1、connect返回-1
    errno=110(ETIMEDOUT)，当服务器端网线拔了的时候，客户端发送SYN过去就会收不到ACK，因此就会出现这个错误，1分钟内就会返  回这个错误。
    errno=111(ECONNREFUSED)，当服务器未listen时，就会报这个错

4.2 ESTABLISHED不一定真的establish
    会出现这种情况：client为ESTABLISHED状态而server为SYN_REVD状态。这是因为LINUX不像其他操作系统在收到SYN为该连接立马分配一块内存空间用于存储相关的数据和结构，
而是延迟到接收到client的ACK，即三次握手真正完成后才分配空间，这是为了防范SYN flooding攻击。 如果是这种情况，那么就会出现client端未ESTABLISHED状态，server为
SYN_RECV状态。并且server的SYN_RECV状态在一定时间后会消失，client的established状态也会消失。这是因为server在SYN_RECV状态时，会像client发送多次的SYN+ACK
（因为他以为自己的这个包对方没收到），发送的次数定义在/proc/sys/net/ipv4/tcp_synack_retries中，默认为5.在发送5次之后还没有收到ACK，就将其回收了，所以用netstat
查看就看不到这个SYN_RECV状态了。并且会像client发送RST信号。这就会导致client的这种半连接最后也会消失。这个可以通过tcpdump抓包得到（最好知道src这样看到的包比较集中）。



    MSL，即Maximum Segment Lifetime，一个数据分片(报文)在网络中能够生存的最长时间，在RFC 793中定义MSL通常为2分钟，即超过两分钟即认为这个报文已经在网络中被丢弃了。
对于一个TCP连接，在双方进入TIME_WAIT后，通常会等待2倍MSL时间后，再关闭掉连接，作用是为了防止由于FIN报文丢包，对端重发导致与后续的TCP连接请求产生顺序混乱，具体原理
这里就不详细解释了，可以参考：http://blog..net/qwertyupoiuytr/article/details/68938963。MSL的时长其实是一个估计值，由于这个值会影响很多基于TCP的应用的连接
复用和调优，所以在实际生产中，需要针对具体的应用来调整MSL的具体值(需要注意的是，由于MSL值是对于系统层面来说，所以调整后，会对系统中部署的全部应用产生影响)。

1、查看系统MSL配置
    [root@b-mysql-core05 ~]# cat /proc/sys/net/ipv4/tcp_fin_timeout
    60

2、更改MSL配置
    [root@b-mysql-core05 ~]# echo 120 > /proc/sys/net/ipv4/tcp_fin_timeout

3、使修改生效
    [root@b-mysql-core05 ~]# sysctl -p /etc/sysctl.conf
    net.ipv4.ip_local_port_range = 10000 65535
    net.ipv6.conf.all.disable_ipv6 = 1
    net.ipv6.conf.default.disable_ipv6 = 1
    net.core.somaxconn = 4000
    net.ipv4.tcp_tw_reuse = 1
    net.ipv4.tcp_syncookies = 0
    fs.aio-max-nr = 524288

4、查看MSL配置是否生效
    [root@b-mysql-core05 ~]# sysctl -a | grep fin
    net.ipv4.tcp_fin_timeout = 120



